# IPython log file

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
from arpes.io import load_data
import xarray as xr
def load_csv_datatype(path_to_file: str, 
                      n_scans: int= 1,
                      energy_key: str = 'Energy(meas)',
                      dim_name: str = 'eV') -> xr.DataArray:
    """
    This function load a dataset in the csv format using pandas.
    the number of scans need to be manually insered. 
    If multiple scans are present the mean is considered 
    """

    df = pd.read_csv(path_to_file, skiprows=1, sep='\t')

    scan_list = [f'Scan{i}' for i in range(1,n_scans+1)]
    loaded_data = df[scan_list].mean(axis=1).to_numpy()
    
    #loaded_data = [df[key].to_numpy().T for key in scan_list]

    coords = {dim_name : df[energy_key].to_numpy()}

    return xr.DataArray(
        loaded_data,
        coords=coords,
        dims=dim_name,
        # attrs={...} <- attributes here
    )
data_path = 'dati/Mg_Ag_50V_fermilevel.csv'

df = pd.read_csv(data_path, skiprows=1, sep='\t')
df
data = load_csv_datatype(path_to_file=data_path, n_scans=7)

# Plot datas
fig, axes = plt.subplots(1, 1, figsize=(6,4))

#data.sum("eV").S.plot(ax=axes)
data.S.plot(ax=axes)

plt.tight_layout()
from arpes.fits.fit_models import GaussianModel, AffineBackgroundModel, LorentzianModel, VoigtModel, FermiDiracModel
from arpes.analysis.shirley import remove_shirley_background, calculate_shirley_background_full_range
from arpes.fits.utilities import result_to_hints
#test_curve = data.spectrum.where(ws2_mask & ~wide_peak_mask).mean(["x", "y"]).sel(eV=slice(-36, -31))

# Selection
selection = df['Energy(meas)'].between(1243, 1249, inclusive=False).to_numpy()

test_curve = data.sel(eV=selection)
#test_curve = test_curve - calculate_shirley_background_full_range(test_curve, max_iters=100)

test_model =  FermiDiracModel(prefix="a_") 
result = test_model.guess_fit(
    test_curve - test_curve.min(),
    params={
        #"a_center": {"value": 883, "max":885, "min":880 },
        #"a_amplitude": {"min": 0},
        #"b_center": {"value": 910, "max":915, "min":907},
        #"b_amplitude": {"min": 0},
    }
)
result.plot()
result
from arpes.fits.fit_models import GaussianModel, AffineBackgroundModel, LorentzianModel, VoigtModel, FermiDiracModel
from arpes.analysis.shirley import remove_shirley_background, calculate_shirley_background_full_range
from arpes.fits.utilities import result_to_hints
#test_curve = data.spectrum.where(ws2_mask & ~wide_peak_mask).mean(["x", "y"]).sel(eV=slice(-36, -31))

# Selection
selection = df['Energy(meas)'].between(1243, 1249, inclusive=False).to_numpy()

test_curve = data.sel(eV=selection)
#test_curve = test_curve - calculate_shirley_background_full_range(test_curve, max_iters=100)

test_model =  FermiDiracModel(prefix="a_") 
result = test_model.guess_fit(
    test_curve - test_curve.min(),
    params={
        "a_center": {"value": 1245.5, "max":1247, "min":1244 },
        #"a_amplitude": {"min": 0},
        #"b_center": {"value": 910, "max":915, "min":907},
        #"b_amplitude": {"min": 0},
    }
)
result.plot()
result
from arpes.fits.fit_models import GaussianModel, AffineBackgroundModel, LorentzianModel, VoigtModel, FermiDiracModel
from arpes.analysis.shirley import remove_shirley_background, calculate_shirley_background_full_range
from arpes.fits.utilities import result_to_hints
#test_curve = data.spectrum.where(ws2_mask & ~wide_peak_mask).mean(["x", "y"]).sel(eV=slice(-36, -31))

# Selection
selection = df['Energy(meas)'].between(1243, 1251, inclusive=False).to_numpy()

test_curve = data.sel(eV=selection)
#test_curve = test_curve - calculate_shirley_background_full_range(test_curve, max_iters=100)

test_model =  FermiDiracModel(prefix="a_") 
result = test_model.guess_fit(
    test_curve - test_curve.min(),
    params={
        "a_center": {"value": 1245.5, "max":1247, "min":1244 },
        #"a_amplitude": {"min": 0},
        #"b_center": {"value": 910, "max":915, "min":907},
        #"b_amplitude": {"min": 0},
    }
)
result.plot()
result
from arpes.fits.fit_models import GaussianModel, AffineBackgroundModel, LorentzianModel, VoigtModel, FermiDiracModel, FermiLorentzianModel
from arpes.analysis.shirley import remove_shirley_background, calculate_shirley_background_full_range
from arpes.fits.utilities import result_to_hints
#test_curve = data.spectrum.where(ws2_mask & ~wide_peak_mask).mean(["x", "y"]).sel(eV=slice(-36, -31))

# Selection
selection = df['Energy(meas)'].between(1243, 1251, inclusive=False).to_numpy()

test_curve = data.sel(eV=selection)
#test_curve = test_curve - calculate_shirley_background_full_range(test_curve, max_iters=100)

test_model =  FermiLorentzianModel(prefix="a_") 
result = test_model.guess_fit(
    test_curve - test_curve.min(),
    params={
        "a_center": {"value": 1245.5, "max":1247, "min":1244 },
        #"a_amplitude": {"min": 0},
        #"b_center": {"value": 910, "max":915, "min":907},
        #"b_amplitude": {"min": 0},
    }
)
result.plot()
result
from arpes.fits.fit_models import GaussianModel, AffineBackgroundModel, LorentzianModel, VoigtModel, FermiDiracModel, FermiLorentzianModel
from arpes.analysis.shirley import remove_shirley_background, calculate_shirley_background_full_range
from arpes.fits.utilities import result_to_hints
#test_curve = data.spectrum.where(ws2_mask & ~wide_peak_mask).mean(["x", "y"]).sel(eV=slice(-36, -31))

# Selection
selection = df['Energy(meas)'].between(1243, 1251, inclusive=False).to_numpy()

test_curve = data.sel(eV=selection)
#test_curve = test_curve - calculate_shirley_background_full_range(test_curve, max_iters=100)

test_model =  FermiDiracModel(prefix="a_") 
result = test_model.guess_fit(
    test_curve - test_curve.min(),
    params={
        "a_center": {"value": 1245.5, "max":1247, "min":1244 },
        #"a_amplitude": {"min": 0},
        #"b_center": {"value": 910, "max":915, "min":907},
        #"b_amplitude": {"min": 0},
    }
)
result.plot()
result
print(result.fit_report())

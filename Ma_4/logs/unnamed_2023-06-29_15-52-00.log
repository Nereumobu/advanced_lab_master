# IPython log file

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt 
from arpes.io import load_data
import xarray as xr
def load_csv_datatype(path_to_file: str = None, 
                      df = None,
                      n_scans: int= 1,
                      energy_key: str = 'Energy(meas)',
                      dim_name: str = 'eV') -> xr.DataArray:
    """
    This function load a dataset in the csv format using pandas.
    the number of scans need to be manually insered. 
    If multiple scans are present the mean is considered 
    """
    if path_to_file is not None:
        df = pd.read_csv(path_to_file, skiprows=1, sep='\t')
    elif df is not None:
        df=df
    else:
        print('One of path_to_file or df need to be specified')
        return 0

    scan_list = [f'Scan{i}' for i in range(1,n_scans+1)]
    loaded_data = df[scan_list].mean(axis=1).to_numpy()
    
    #loaded_data = [df[key].to_numpy().T for key in scan_list]

    coords = {dim_name : df[energy_key].to_numpy()}

    return xr.DataArray(
        loaded_data,
        coords=coords,
        dims=dim_name,
        # attrs={...} <- attributes here
    )
data_path = 'dati/Coin_Al_50V_fullspctra.csv'

df = pd.read_csv(data_path, skiprows=1, sep='\t')
df
fermi_energy = 1477.61674 #+/- 0.50422479

df['BindingEnergy'] = fermi_energy - df['Energy(meas)']

df
#df.plot('Energy(meas)', 'Sum')
# plt.show()

positive_mask = np.where(df['BindingEnergy'].to_numpy()>=0)

be = df['BindingEnergy'].to_numpy()[positive_mask]
count = df['Scan1'].to_numpy()[positive_mask]

fig = plt.figure(figsize=(15,5))
plt.plot(be,count)
plt.title('Spectrum of 10 DM coin')
plt.xlabel('Binding energy [eV]')
plt.ylabel('Counts')
plt.show()
shift = 0#20


positive_mask = np.where(df['BindingEnergy'].to_numpy()>=0)

be = df['BindingEnergy'].to_numpy()[positive_mask]
count = df['Scan1'].to_numpy()[positive_mask]

fig = plt.figure(figsize=(15,5))
plt.plot(be+shift,count)

# Cu
plt.text(952.3, 2700, 'Cu 2p1/2', rotation='vertical')
plt.text(932.7, 2700, 'Cu 2p3/2', rotation='vertical')
plt.text(1096.7, 2700, 'Cu 2s', rotation='vertical')
# C
plt.text(284.2, 2700, 'C 1s', rotation='vertical')
# Fe
# plt.text(706.8, 2700, 'Fe 2p3/2', rotation='vertical')
# plt.text(719.9, 2700, 'Fe 2p1/2', rotation='vertical')
# plt.text(844.6, 2700, 'Fe 2s', rotation='vertical')
# Sn
# plt.text(884.7, 2700, 'Sn 3d5/2', rotaSn 3s', rotation='vertical')
# plt.text(756.5, 2700, 'Sn 3p1/2', rotation='vertical')
# plt.text(714.6, 2700, 'Sn 3p3/2', rotation='vertical')
# plt.text(493.2, 2700, 'Sn 3d3/2', rotation='vertical')
# plt.text(484.9, 2700, tion='vertical')
# Zn
# plt.text(1044.9, 2700, 'Zn 2p1/2', rotation='vertical')
# plt.text(1021.8, 2700, 'Zn 2p3/2', rotation='vertical')
# Ag
# plt.text(719.0, 2700, 'Ag 3s', rotation='vertical')
# plt.text(603.8, 2700, 'Ag 3p1/2', rotation='vertical')
# plt.text(573.0, 2700, 'Ag 3p3/2', rotation='vertical')
# plt.text(374.0, 2700, 'Ag 3d3/2', rotation='vertical')
# plt.text(368.0, 2700, 'Ag 3d5/2', rotation='vertical')
# Pb
# plt.text(671.6, 2700, 'Pb 3s', rotation='vertical')
# plt.text(559.9, 2700, 'Pb 3p1/2', rotation='vertical')
# plt.text(532.3, 2700, 'Pb 3p3/2', rotation='vertical')
# plt.text(340.5, 2700, 'Pb 3d3/2', rotation='vertical')
# plt.text(335.2, 2700, 'Pb 3d5/2', rotation='vertical')
# Ni
# plt.text(852.7, 2700, 'Ni 2p3/2', rotation='vertical')
# plt.text(870.0, 2700, 'Ni 2p1/2', rotation='vertical')
# plt.text(1008.6, 2700, 'Ni 2s', rotation='vertical')
# O
plt.text(543.1, 2700, 'O 1s', rotation='vertical')
# Ga
# plt.text(1143.2, 2700, 'Ga 2p1/2', rotation='vertical')
# plt.text(1116.4, 2700, 'Ga 2p3/2', rotation='vertical')
# Sm
plt.text(1083.4, 2700, 'Sm 2d5/2', rotation='vertical')
plt.text(1110.9, 2700, 'Sm 2d3/2', rotation='vertical')
plt.text(347.2, 2700, 'Sm 4s', rotation='vertical')
plt.text(265.6, 2700, 'Sm 4p1/2', rotation='vertical')
plt.text(247.6, 2700, 'Sm 4p3/2', rotation='vertical')

plt.title('Spectrum of 10 DM coin')
plt.xlabel('Binding energy [eV]')
plt.ylabel('Counts (arbs.unit)')
plt.show()
